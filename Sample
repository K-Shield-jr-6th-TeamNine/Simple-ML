from tensorflow import keras

if __name__=="__main__":
    train_set = [j.split(',') for j in [i for i in open("Train.txt", 'r+').read().split()]]
    test_set = [j.split(',') for j in [i for i in open("Test.txt", 'r+').read().split()]]

    feature_number = len(train_set[0])

    #train_set encoding(string, float -> int)
    for i in range(len(train_set)):
        # protocoltype -> tcp, udp, icmp
        if train_set[i][1] == "tcp": train_set[i][1] = 1
        elif train_set[i][1] == "udp": train_set[i][1] = 2
        elif train_set[i][1] == "icmp": train_set[i][1] = 3

        # service -> ['ftp_data', 'other', 'private', 'http', 'remote_job', 'name', 'netbios_ns', 'eco_i', 'mtp', 'telnet', 'finger', 'domain_u', 'supdup', 'uucp_path', 'Z39_50', 'smtp', 'csnet_ns', 'uucp', 'netbios_dgm', 'urp_i', 'auth', 'domain', 'ftp', 'bgp', 'ldap', 'ecr_i', 'gopher', 'vmnet', 'systat', 'http_443', 'efs', 'whois', 'imap4', 'iso_tsap', 'echo', 'klogin', 'link', 'sunrpc', 'login', 'kshell', 'sql_net', 'time', 'hostnames', 'exec', 'ntp_u', 'discard', 'nntp', 'courier', 'ctf', 'ssh', 'daytime', 'shell', 'netstat', 'pop_3', 'nnsp', 'IRC', 'pop_2', 'printer', 'tim_i', 'pm_dump', 'red_i', 'netbios_ssn', 'rje', 'X11', 'urh_i', 'http_8001', 'aol', 'http_2784', 'tftp_u', 'harvest']
        if train_set[i][2] == "ftp_data": train_set[i][2] = 1
        elif train_set[i][2] == "other": train_set[i][2] = 2
        elif train_set[i][2] == "private": train_set[i][2] = 3
        elif train_set[i][2] == "http": train_set[i][2] = 4
        elif train_set[i][2] == "remote_job": train_set[i][2] = 5
        elif train_set[i][2] == "name": train_set[i][2] = 6
        elif train_set[i][2] == "netbios_ns": train_set[i][2] = 7
        elif train_set[i][2] == "eco_i": train_set[i][2] = 8
        elif train_set[i][2] == "mtp": train_set[i][2] = 9
        elif train_set[i][2] == "telnet": train_set[i][2] = 10
        elif train_set[i][2] == "finger": train_set[i][2] = 11
        elif train_set[i][2] == "domain_u": train_set[i][2] = 12
        elif train_set[i][2] == "supdup": train_set[i][2] = 13
        elif train_set[i][2] == "uucp_path": train_set[i][2] = 14
        elif train_set[i][2] == "Z39_50": train_set[i][2] = 15
        elif train_set[i][2] == "smtp": train_set[i][2] = 16
        elif train_set[i][2] == "csnet_ns": train_set[i][2] = 17
        elif train_set[i][2] == "uucp": train_set[i][2] = 18
        elif train_set[i][2] == "netbios_dgm": train_set[i][2] = 19
        elif train_set[i][2] == "urp_i": train_set[i][2] = 20
        elif train_set[i][2] == "auth": train_set[i][2] = 21
        elif train_set[i][2] == "domain": train_set[i][2] = 22
        elif train_set[i][2] == "ftp": train_set[i][2] = 23
        elif train_set[i][2] == "bgp": train_set[i][2] = 24
        elif train_set[i][2] == "ldap": train_set[i][2] = 25
        elif train_set[i][2] == "ecr_i": train_set[i][2] = 26
        elif train_set[i][2] == "gopher": train_set[i][2] = 27
        elif train_set[i][2] == "vmnet": train_set[i][2] = 28
        elif train_set[i][2] == "systat": train_set[i][2] = 29
        elif train_set[i][2] == "http_443": train_set[i][2] = 30
        elif train_set[i][2] == "efs": train_set[i][2] = 31
        elif train_set[i][2] == "whois": train_set[i][2] = 32
        elif train_set[i][2] == "imap4": train_set[i][2] = 33
        elif train_set[i][2] == "iso_tsap": train_set[i][2] = 34
        elif train_set[i][2] == "echo": train_set[i][2] = 35
        elif train_set[i][2] == "klogin": train_set[i][2] = 36
        elif train_set[i][2] == "link": train_set[i][2] = 37
        elif train_set[i][2] == "sunrpc": train_set[i][2] = 38
        elif train_set[i][2] == "login": train_set[i][2] = 39
        elif train_set[i][2] == "kshell": train_set[i][2] = 40
        elif train_set[i][2] == "sql_net": train_set[i][2] = 41
        elif train_set[i][2] == "time": train_set[i][2] = 42
        elif train_set[i][2] == "hostnames": train_set[i][2] = 43
        elif train_set[i][2] == "exec": train_set[i][2] = 44
        elif train_set[i][2] == "ntp_u": train_set[i][2] = 45
        elif train_set[i][2] == "discard": train_set[i][2] = 46
        elif train_set[i][2] == "nntp": train_set[i][2] = 47
        elif train_set[i][2] == "courier": train_set[i][2] = 48
        elif train_set[i][2] == "ctf": train_set[i][2] = 49
        elif train_set[i][2] == "ssh": train_set[i][2] = 50
        elif train_set[i][2] == "daytime": train_set[i][2] = 51
        elif train_set[i][2] == "shell": train_set[i][2] = 52
        elif train_set[i][2] == "netstat": train_set[i][2] = 53
        elif train_set[i][2] == "pop_3": train_set[i][2] = 54
        elif train_set[i][2] == "nnsp": train_set[i][2] = 55
        elif train_set[i][2] == "IRC": train_set[i][2] = 56
        elif train_set[i][2] == "pop_2": train_set[i][2] = 57
        elif train_set[i][2] == "printer": train_set[i][2] = 58
        elif train_set[i][2] == "tim_i": train_set[i][2] = 59
        elif train_set[i][2] == "pm_dump": train_set[i][2] = 60
        elif train_set[i][2] == "red_i": train_set[i][2] = 61
        elif train_set[i][2] == "netbios_ssn": train_set[i][2] = 62
        elif train_set[i][2] == "rje": train_set[i][2] = 63
        elif train_set[i][2] == "X11": train_set[i][2] = 64
        elif train_set[i][2] == "urh_i": train_set[i][2] = 65
        elif train_set[i][2] == "http_8001": train_set[i][2] = 66
        elif train_set[i][2] == "aol": train_set[i][2] = 67
        elif train_set[i][2] == "http_2784": train_set[i][2] = 68
        elif train_set[i][2] == "tftp_u": train_set[i][2] = 69
        elif train_set[i][2] == "harvest": train_set[i][2] = 70

        #flag --> ['SF', 'S0', 'REJ', 'RSTR', 'SH', 'RSTO', 'S1', 'RSTOS0', 'S3', 'S2', 'OTH']
        if train_set[i][3] == "SF": train_set[i][3] = 1
        elif train_set[i][3] == "S0": train_set[i][3] = 2
        elif train_set[i][3] == "REJ": train_set[i][3] = 3
        elif train_set[i][3] == "RSTR": train_set[i][3] = 4
        elif train_set[i][3] == "SH": train_set[i][3] = 5
        elif train_set[i][3] == "RSTO": train_set[i][3] = 6
        elif train_set[i][3] == "S1": train_set[i][3] = 7
        elif train_set[i][3] == "RSTOS0": train_set[i][3] = 8
        elif train_set[i][3] == "S3": train_set[i][3] = 9
        elif train_set[i][3] == "S2": train_set[i][3] = 10
        elif train_set[i][3] == "OTH": train_set[i][3] = 11

        #attack --> normal, etc.
        if train_set[i][-2] == 'normal': train_set[i][-2] = 0
        else: train_set[i][-2] = 1

        #나머지 정수가 아닌 것
        for j in range(feature_number):
            if type(train_set[i][j]) != int:
                try:
                    train_set[i][j] = int(train_set[i][j])
                    if train_set[i][j] > 1000000:
                        train_set[i][j] = train_set[i][j] % 1000000
                except:
                    train_set[i][j] = 0
                    continue

    # test_set encoding(string, float -> int)
    for i in range(len(test_set)):
        # protocoltype -> tcp, udp, icmp
        if test_set[i][1] == "tcp":
            test_set[i][1] = 1
        elif test_set[i][1] == "udp":
            test_set[i][1] = 2
        elif test_set[i][1] == "icmp":
            test_set[i][1] = 3

        # service -> ['ftp_data', 'other', 'private', 'http', 'remote_job', 'name', 'netbios_ns', 'eco_i', 'mtp', 'telnet', 'finger', 'domain_u', 'supdup', 'uucp_path', 'Z39_50', 'smtp', 'csnet_ns', 'uucp', 'netbios_dgm', 'urp_i', 'auth', 'domain', 'ftp', 'bgp', 'ldap', 'ecr_i', 'gopher', 'vmnet', 'systat', 'http_443', 'efs', 'whois', 'imap4', 'iso_tsap', 'echo', 'klogin', 'link', 'sunrpc', 'login', 'kshell', 'sql_net', 'time', 'hostnames', 'exec', 'ntp_u', 'discard', 'nntp', 'courier', 'ctf', 'ssh', 'daytime', 'shell', 'netstat', 'pop_3', 'nnsp', 'IRC', 'pop_2', 'printer', 'tim_i', 'pm_dump', 'red_i', 'netbios_ssn', 'rje', 'X11', 'urh_i', 'http_8001', 'aol', 'http_2784', 'tftp_u', 'harvest']
        if test_set[i][2] == "ftp_data":
            test_set[i][2] = 1
        elif test_set[i][2] == "other":
            test_set[i][2] = 2
        elif test_set[i][2] == "private":
            test_set[i][2] = 3
        elif test_set[i][2] == "http":
            test_set[i][2] = 4
        elif test_set[i][2] == "remote_job":
            test_set[i][2] = 5
        elif test_set[i][2] == "name":
            test_set[i][2] = 6
        elif test_set[i][2] == "netbios_ns":
            test_set[i][2] = 7
        elif test_set[i][2] == "eco_i":
            test_set[i][2] = 8
        elif test_set[i][2] == "mtp":
            test_set[i][2] = 9
        elif test_set[i][2] == "telnet":
            test_set[i][2] = 10
        elif test_set[i][2] == "finger":
            test_set[i][2] = 11
        elif test_set[i][2] == "domain_u":
            test_set[i][2] = 12
        elif test_set[i][2] == "supdup":
            test_set[i][2] = 13
        elif test_set[i][2] == "uucp_path":
            test_set[i][2] = 14
        elif test_set[i][2] == "Z39_50":
            test_set[i][2] = 15
        elif test_set[i][2] == "smtp":
            test_set[i][2] = 16
        elif test_set[i][2] == "csnet_ns":
            test_set[i][2] = 17
        elif test_set[i][2] == "uucp":
            test_set[i][2] = 18
        elif test_set[i][2] == "netbios_dgm":
            test_set[i][2] = 19
        elif test_set[i][2] == "urp_i":
            test_set[i][2] = 20
        elif test_set[i][2] == "auth":
            test_set[i][2] = 21
        elif test_set[i][2] == "domain":
            test_set[i][2] = 22
        elif test_set[i][2] == "ftp":
            test_set[i][2] = 23
        elif test_set[i][2] == "bgp":
            test_set[i][2] = 24
        elif test_set[i][2] == "ldap":
            test_set[i][2] = 25
        elif test_set[i][2] == "ecr_i":
            test_set[i][2] = 26
        elif test_set[i][2] == "gopher":
            test_set[i][2] = 27
        elif test_set[i][2] == "vmnet":
            test_set[i][2] = 28
        elif test_set[i][2] == "systat":
            test_set[i][2] = 29
        elif test_set[i][2] == "http_443":
            test_set[i][2] = 30
        elif test_set[i][2] == "efs":
            test_set[i][2] = 31
        elif test_set[i][2] == "whois":
            test_set[i][2] = 32
        elif test_set[i][2] == "imap4":
            test_set[i][2] = 33
        elif test_set[i][2] == "iso_tsap":
            test_set[i][2] = 34
        elif test_set[i][2] == "echo":
            test_set[i][2] = 35
        elif test_set[i][2] == "klogin":
            test_set[i][2] = 36
        elif test_set[i][2] == "link":
            test_set[i][2] = 37
        elif test_set[i][2] == "sunrpc":
            test_set[i][2] = 38
        elif test_set[i][2] == "login":
            test_set[i][2] = 39
        elif test_set[i][2] == "kshell":
            test_set[i][2] = 40
        elif test_set[i][2] == "sql_net":
            test_set[i][2] = 41
        elif test_set[i][2] == "time":
            test_set[i][2] = 42
        elif test_set[i][2] == "hostnames":
            test_set[i][2] = 43
        elif test_set[i][2] == "exec":
            test_set[i][2] = 44
        elif test_set[i][2] == "ntp_u":
            test_set[i][2] = 45
        elif test_set[i][2] == "discard":
            test_set[i][2] = 46
        elif test_set[i][2] == "nntp":
            test_set[i][2] = 47
        elif test_set[i][2] == "courier":
            test_set[i][2] = 48
        elif test_set[i][2] == "ctf":
            test_set[i][2] = 49
        elif test_set[i][2] == "ssh":
            test_set[i][2] = 50
        elif test_set[i][2] == "daytime":
            test_set[i][2] = 51
        elif test_set[i][2] == "shell":
            test_set[i][2] = 52
        elif test_set[i][2] == "netstat":
            test_set[i][2] = 53
        elif test_set[i][2] == "pop_3":
            test_set[i][2] = 54
        elif test_set[i][2] == "nnsp":
            test_set[i][2] = 55
        elif test_set[i][2] == "IRC":
            test_set[i][2] = 56
        elif test_set[i][2] == "pop_2":
            test_set[i][2] = 57
        elif test_set[i][2] == "printer":
            test_set[i][2] = 58
        elif test_set[i][2] == "tim_i":
            test_set[i][2] = 59
        elif test_set[i][2] == "pm_dump":
            test_set[i][2] = 60
        elif test_set[i][2] == "red_i":
            test_set[i][2] = 61
        elif test_set[i][2] == "netbios_ssn":
            test_set[i][2] = 62
        elif test_set[i][2] == "rje":
            test_set[i][2] = 63
        elif test_set[i][2] == "X11":
            test_set[i][2] = 64
        elif test_set[i][2] == "urh_i":
            test_set[i][2] = 65
        elif test_set[i][2] == "http_8001":
            test_set[i][2] = 66
        elif test_set[i][2] == "aol":
            test_set[i][2] = 67
        elif test_set[i][2] == "http_2784":
            test_set[i][2] = 68
        elif test_set[i][2] == "tftp_u":
            test_set[i][2] = 69
        elif test_set[i][2] == "harvest":
            test_set[i][2] = 70

        # flag --> ['SF', 'S0', 'REJ', 'RSTR', 'SH', 'RSTO', 'S1', 'RSTOS0', 'S3', 'S2', 'OTH']
        if test_set[i][3] == "SF":
            test_set[i][3] = 1
        elif test_set[i][3] == "S0":
            test_set[i][3] = 2
        elif test_set[i][3] == "REJ":
            test_set[i][3] = 3
        elif test_set[i][3] == "RSTR":
            test_set[i][3] = 4
        elif test_set[i][3] == "SH":
            test_set[i][3] = 5
        elif test_set[i][3] == "RSTO":
            test_set[i][3] = 6
        elif test_set[i][3] == "S1":
            test_set[i][3] = 7
        elif test_set[i][3] == "RSTOS0":
            test_set[i][3] = 8
        elif test_set[i][3] == "S3":
            test_set[i][3] = 9
        elif test_set[i][3] == "S2":
            test_set[i][3] = 10
        elif test_set[i][3] == "OTH":
            test_set[i][3] = 11

        # attack(label) --> normal, etc.
        if test_set[i][-2] == 'normal':
            test_set[i][-2] = 0
        else:
            test_set[i][-2] = 1

        # 나머지 정수가 아닌 것
        for j in range(feature_number):
            if type(test_set[i][j]) != int:
                try:
                    test_set[i][j] = int(test_set[i][j])
                    if test_set[i][j] > 1000000:
                        test_set[i][j] = test_set % 1000000
                except:
                    test_set[i][j] = 0
                    continue

    train_labels = [i[-2] for i in train_set]
    test_labels = [i[-2] for i in test_set]

    max_value = 1000000
    model = keras.Sequential()
    model.add(keras.layers.Embedding(max_value, 16, input_shape=(None,)))
    model.add(keras.layers.GlobalAveragePooling1D())
    model.add(keras.layers.Dense(16, activation='relu'))
    model.add(keras.layers.Dense(1, activation='sigmoid'))

    model.summary()

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

    x_val = train_set[:80000]
    partial_x_train = train_set[80000:]

    y_val = train_labels[:80000]
    partial_y_train = train_labels[80000:]

    history = model.fit(partial_x_train, partial_y_train,
                        epochs=20, batch_size=512,
                        validation_data=(x_val, y_val), verbose=1)
    results = model.evaluate(test_set, test_labels, verbose=2)
    print("results\n", results)

    ##----------------- Loss 그래프 출력 ----------------
    history_dict = history.history
    history_dict.keys()

    acc = history_dict['accuracy']
    val_acc = history_dict['val_accuracy']
    loss = history_dict['loss']
    val_loss = history_dict['val_loss']

    epochs = range(1, len(acc) + 1)

    # "bo"는 "파란색 점"입니다
    plt.plot(epochs, loss, 'bo', label='Training loss')
    # b는 "파란 실선"입니다
    plt.plot(epochs, val_loss, 'b', label='Validation loss')
    plt.title('Training and validation loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()

    plt.show()

    #----------------- Accuracy 그래프 출력 ----------------
    plt.clf()  # 그림을 초기화합니다

    plt.plot(epochs, acc, 'bo', label='Training acc')
    plt.plot(epochs, val_acc, 'b', label='Validation acc')
    plt.title('Training and validation accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend()

    plt.show()
